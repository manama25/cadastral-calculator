# app.py ‚Äî –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
# –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞: https://disk.yandex.ru/d/DB_EoNBlaIoLMg
# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ KeyError: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–µ–º–µ–ª—å' ‚Üí —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–µ–º–ª–∏'

import streamlit as st
import pandas as pd
import bcrypt
import datetime
import io
import requests
from io import StringIO
import os

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
YANDEX_PUBLIC_KEY = "DB_EoNBlaIoLMg"  # ‚Üê –≤–∞—à ID –∏–∑ —Å—Å—ã–ª–∫–∏
USERS_PATH = "users.csv"
LOG_PATH = "requests_log.csv"

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ ---
@st.cache_data(ttl=3600)  # –ö—ç—à –Ω–∞ 1 —á–∞—Å
def load_data():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
        download_url = f"https://cloud-api.yandex.net/v1/disk/public/resources/download?public_key=https://disk.yandex.ru/d/{YANDEX_PUBLIC_KEY}"
        response = requests.get(download_url)
        response.raise_for_status()
        direct_link = response.json()["href"]

        # –°–∫–∞—á–∏–≤–∞–µ–º CSV
        csv_response = requests.get(direct_link)
        csv_response.raise_for_status()

        # –ß–∏—Ç–∞–µ–º –≤ DataFrame
        df = pd.read_csv(
            StringIO(csv_response.text),
            sep=";",  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ‚Äî —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π
            on_bad_lines="skip",
            dtype={"–ö–æ–¥ –ö–õ–ê–î–†": str, "–ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –∫–≤–∞—Ä—Ç–∞–ª": str}
        )

        # üîΩ –û—á–∏—â–∞–µ–º –∏–º–µ–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ (—É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã, –ø–µ—Ä–µ–Ω–æ—Å—ã)
        df.columns = df.columns.str.strip().str.replace("\n", "", regex=False).str.replace("\r", "", regex=False)

        # üîΩ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ ‚Äî –∫–ª—é—á–µ–≤–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        column_mapping = {
            '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–µ–º–ª–∏': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–µ–º–µ–ª—å',  # ‚Üê –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ!
            '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–µ–º–µ–ª—å ': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–µ–º–µ–ª—å',
            '–∫–∞—Ç–µ–≥–æ—Ä–∏—è –∑–µ–º–µ–ª—å': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–µ–º–µ–ª—å',
            '–ö–∞—Ç–µ–≥–æ—Ä–∏—è_–∑–µ–º–µ–ª—å': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–µ–º–µ–ª—å',
            '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ó–µ–º–µ–ª—å': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–µ–º–µ–ª—å',
            '  –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–µ–º–µ–ª—å  ': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–µ–º–µ–ª—å',
            '–ù–∞–ª–∏—á–∏–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è ': '–ù–∞–ª–∏—á–∏–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è',
            '–ù–∞–ª–∏—á–∏–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –≥–∞–∑–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è ': '–ù–∞–ª–∏—á–∏–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –≥–∞–∑–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è',
            '–ù–∞–ª–∏—á–∏–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ ': '–ù–∞–ª–∏—á–∏–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏–∏',
            '–ù–∞–ª–∏—á–∏–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ —Ç–µ–ø–ª–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è ': '–ù–∞–ª–∏—á–∏–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ —Ç–µ–ø–ª–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è',
            '–ù–∞–ª–∏—á–∏–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–∫—Ç—Ä–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è ': '–ù–∞–ª–∏—á–∏–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–∫—Ç—Ä–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è',
            '–£–¥–µ–ª—å–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ ': '–£–¥–µ–ª—å–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏',
            '–ê–¥—Ä–µ—Å –ø–æ –ö–õ–ê–î–† ': '–ê–¥—Ä–µ—Å –ø–æ –ö–õ–ê–î–†',
            '–ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –∫–≤–∞—Ä—Ç–∞–ª ': '–ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –∫–≤–∞—Ä—Ç–∞–ª',
        }
        df = df.rename(columns=column_mapping)

        return df

    except Exception as e:
        st.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {e}")
        st.stop()

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
@st.cache_data
def load_users():
    if not os.path.exists(USERS_PATH):
        st.error("–§–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω: users.csv")
        st.stop()
    return pd.read_csv(USERS_PATH)

def log_request(username, filters, count):
    log_entry = {
        "timestamp": datetime.datetime.now().isoformat(),
        "username": username,
        "filters": str(filters),
        "result_count": count,
        "ip": st.context.request.remote_addr if st.context.request else "unknown"
    }
    log_df = pd.DataFrame([log_entry])
    header = not os.path.exists(LOG_PATH)
    log_df.to_csv(LOG_PATH, mode="a", header=header, index=False)

# --- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ---
def login():
    st.title("üîê –í—Ö–æ–¥ –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏")

    username = st.text_input("–õ–æ–≥–∏–Ω")
    password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")

    col1, col2 = st.columns([1, 2])
    
    if col1.button("–í–æ–π—Ç–∏", key="login_btn", help="–ù–∞–∂–º–∏—Ç–µ –æ–¥–∏–Ω —Ä–∞–∑"):
        with st.spinner("–í—Ö–æ–¥..."):
            users = load_users()
            user = users[users["username"] == username]
            if len(user) == 1:
                try:
                    hashed = user["hashed_password"].iloc[0].encode('utf-8')
                    if bcrypt.checkpw(password.encode('utf-8'), hashed):
                        st.session_state["logged_in"] = True
                        st.session_state["username"] = username
                        st.session_state["is_admin"] = user["is_admin"].iloc[0]
                        st.rerun()
                    else:
                        st.error("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
                except Exception:
                    st.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è")
            else:
                st.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    with col2:
        st.markdown("### üîî –ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞")
        with st.expander("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø"):
            new_user = st.text_input("–ñ–µ–ª–∞–µ–º—ã–π –ª–æ–≥–∏–Ω")
            email = st.text_input("Email")
            phone = st.text_input("–¢–µ–ª–µ—Ñ–æ–Ω")
            if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å", key="req_btn"):
                if new_user and email:
                    log_pending_request(new_user, email, phone)
                    st.success("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                else:
                    st.error("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ email.")

def log_pending_request(username, email, phone):
    entry = {
        "timestamp": datetime.datetime.now().isoformat(),
        "username": username,
        "email": email,
        "phone": phone,
        "status": "–æ–∂–∏–¥–∞–µ—Ç"
    }
    df = pd.DataFrame([entry])
    header = not os.path.exists("pending_requests.csv")
    df.to_csv("pending_requests.csv", mode="a", header=header, index=False)

# --- –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ---
def main_app():
    df = load_data()
    st.title("üìê –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏")

    # --- –§–∏–ª—å—Ç—Ä—ã ---
    col1, col2 = st.columns(2)

    with col1:
        category = st.selectbox(
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–µ–º–µ–ª—å",
            ["–í—Å–µ"] + sorted(df["–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–µ–º–µ–ª—å"].dropna().unique().tolist()),
            key="category"
        )
        water = st.checkbox("–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ", value=None, key="water")
        gas = st.checkbox("–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –≥–∞–∑–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ", value=None, key="gas")
        sewer = st.checkbox("–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è", value=None, key="sewer")

    with col2:
        heat = st.checkbox("–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ —Ç–µ–ø–ª–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ", value=None, key="heat")
        electricity = st.checkbox("–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ —ç–ª–µ–∫—Ç—Ä–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ", value=None, key="electricity")

    # --- –í—ã–±–æ—Ä —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ ---
    territory_mode = st.radio("–í—ã–±–æ—Ä —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏", ["–ü–æ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–º—É –∫–≤–∞—Ä—Ç–∞–ª—É", "–ü–æ –∞–¥—Ä–µ—Å—É"], key="territory_mode")

    filter_kq = filter_addr = None

    if territory_mode == "–ü–æ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–º—É –∫–≤–∞—Ä—Ç–∞–ª—É":
        filter_kq = st.text_input("–ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –∫–≤–∞—Ä—Ç–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 78:12:0305002)", key="kq_input")
    else:
        addresses = sorted(df["–ê–¥—Ä–µ—Å –ø–æ –ö–õ–ê–î–†"].dropna().astype(str).tolist())
        search = st.text_input("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞...", key="addr_search")

        if search:
            matches = [addr for addr in addresses if search.lower() in addr.lower()]
            if len(matches) == 0:
                st.warning("–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            elif len(matches) > 50:
                st.info("–ù–∞–π–¥–µ–Ω–æ –±–æ–ª–µ–µ 50 —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π. –£—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")
            else:
                filter_addr = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å:", [""] + matches, key="addr_select")

    # --- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è ---
    filtered = df.copy()

    if category != "–í—Å–µ":
        filtered = filtered[filtered["–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–µ–º–µ–ª—å"] == category]

    for col, value in [
        ("–ù–∞–ª–∏—á–∏–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è", water),
        ("–ù–∞–ª–∏—á–∏–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –≥–∞–∑–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è", gas),
        ("–ù–∞–ª–∏—á–∏–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏–∏", sewer),
        ("–ù–∞–ª–∏—á–∏–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ —Ç–µ–ø–ª–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è", heat),
        ("–ù–∞–ª–∏—á–∏–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–∫—Ç—Ä–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è", electricity),
    ]:
        if value is not None:
            filtered = filtered[filtered[col] == value]

    if filter_kq:
        filtered = filtered[filtered["–ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –∫–≤–∞—Ä—Ç–∞–ª"].str.contains(filter_kq, na=False, case=True)]
    if filter_addr:
        filtered = filtered[filtered["–ê–¥—Ä–µ—Å –ø–æ –ö–õ–ê–î–†"] == filter_addr]

    # --- –†–µ–∑—É–ª—å—Ç–∞—Ç ---
    if len(filtered) == 0:
        st.warning("‚ùå –ü–æ –≤–∞—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º —É—á–∞—Å—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    else:
        col_name = "–£–¥–µ–ª—å–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏"
        mean_val = filtered[col_name].mean()
        min_val = filtered[col_name].min()
        max_val = filtered[col_name].max()

        st.success(f"üìä **–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:** {mean_val:,.2f}")
        st.info(f"üìâ **–ú–∏–Ω–∏–º—É–º:** {min_val:,.2f} | **–ú–∞–∫—Å–∏–º—É–º:** {max_val:,.2f}")

        # --- –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel ---
        if st.button("üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Excel", key="export_btn"):
            with st.spinner("–§–æ—Ä–º–∏—Ä—É–µ–º Excel..."):
                buffer = io.BytesIO()
                with pd.ExcelWriter(buffer, engine='openpyxl') as writer:
                    filtered.to_excel(writer, index=False, sheet_name="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
                buffer.seek(0)
                filename = f"–∫–∞–¥–∞—Å—Ç—Ä_{st.session_state['username']}_{datetime.datetime.now().strftime('%Y%m%d_%H%M')}.xlsx"
                st.download_button(
                    label="‚úÖ –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å",
                    data=buffer,
                    file_name=filename,
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    key="dl_btn"
                )

        if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —É—á–∞—Å—Ç–∫–∏", key="show_data"):
            st.dataframe(
                filtered[[
                    "–ù–æ–º–µ—Ä", "–ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –∫–≤–∞—Ä—Ç–∞–ª", "–ê–¥—Ä–µ—Å –ø–æ –ö–õ–ê–î–†",
                    "–í–∏–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É—á–∞—Å—Ç–∫–∞ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É", col_name
                ]],
                use_container_width=True
            )

        log_request(st.session_state["username"], {
            "category": category,
            "water": water,
            "gas": gas,
            "sewer": sewer,
            "heat": heat,
            "electricity": electricity,
            "kq": filter_kq,
            "address": filter_addr
        }, len(filtered))

    # --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ---
    if st.session_state.get("is_admin"):
        st.divider()
        st.subheader("üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")

        # –ó–∞—è–≤–∫–∏ –Ω–∞ –¥–æ—Å—Ç—É–ø
        st.markdown("### üì• –ó–∞—è–≤–∫–∏ –Ω–∞ –¥–æ—Å—Ç—É–ø")
        if os.path.exists("pending_requests.csv"):
            pending_df = pd.read_csv("pending_requests.csv")
            st.dataframe(pending_df, use_container_width=True)
        else:
            st.info("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –¥–æ—Å—Ç—É–ø.")

        # –õ–æ–≥ –∑–∞–ø—Ä–æ—Å–æ–≤
        st.markdown("### üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤")
        if st.button("–û–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏", key="refresh_logs"):
            if os.path.exists(LOG_PATH):
                log_df = pd.read_csv(LOG_PATH)
                st.dataframe(log_df, use_container_width=True)
            else:
                st.info("–õ–æ–≥–∏ –ø–æ–∫–∞ –ø—É—Å—Ç—ã.")

# --- –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª ---
if "logged_in" not in st.session_state:
    st.sidebar.title("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
    login()
else:
    st.sidebar.success(f"–ü—Ä–∏–≤–µ—Ç, {st.session_state['username']}!")
    if st.sidebar.button("–í—ã–π—Ç–∏", key="logout_btn"):
        st.session_state.clear()
        st.rerun()
    main_app()
